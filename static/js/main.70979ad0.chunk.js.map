{"version":3,"sources":["Editor.js","parser.js","seed.js","App.js","internal/serviceWorker.js","index.js"],"names":["Editor","_ref","_ref$code","code","onValueChange","_ref$height","height","react_default","a","createElement","react_custom_scrollbars_lib","style","lib_default","value","highlight","languages","markdown","padding","className","namespace","minim","use","minimParseResult","minimApiDescription","parse","_callee2","source","options","regenerator_default","wrap","_context2","prev","next","abrupt","Promise","resolve","reject","drafter","err","result","stop","toSource","dataStructure","mson","concat","split","map","val","index","repeat","join","whitespace","bodySchema","_ref2","Object","asyncToGenerator","mark","_callee","refract","element","annotations","resource","body","schema","_context","sent","fromRefract","toValue","length","api","resources","get","transitions","transactions","response","messageBody","messageBodySchema","JSON","_x3","apply","this","arguments","seeds","label","seedLabels","seed","ReactGA","initialize","debug","pageview","window","location","pathname","search","JSONTree","_ref$displayDataTypes","displayDataTypes","main_default","src","enableClipboard","name","theme","fontSize","fontFamily","Warnings","dist","bg","p","my","item","ResultRender","_ref3","data","App_Warnings","esm","App_JSONTree","Result","_ref4","_useState","useState","_useState2","slicedToArray","setData","useEffect","then","mr","App_ResultRender","tplSource","toHeight","count","App","innerHeight","useWindowSize","_useState3","_useState4","setIndex","_useState5","_useState6","setDataStructure","_useState7","_useState8","setMson","_useState9","_useState10","setSource","_useState11","_useState12","setCount","_useDebouncedCallback","useDebouncedCallback","event","category","action","sourceCallback","onExpand","onClose","flexWrap","px","py","width","react_dropdown_dist_default","onChange","_ref5","dist_modules","allowMultiple","duration","title","expanded","src_Editor_0","textAlign","m","href","color","App_Result","GithubCorner_default","bannerColor","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.70979ad0.chunk.js","sourcesContent":["import React from \"react\";\nimport CodeEditor from \"react-simple-code-editor\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport { highlight, languages } from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-markup\";\nimport \"prismjs/components/prism-markdown\";\nimport \"./Editor.css\";\n\nconst Editor = ({ code = \"\", onValueChange, height = 350 }) => {\n  return (\n    <Scrollbars style={{ height }}>\n      <CodeEditor\n        value={code}\n        onValueChange={onValueChange}\n        highlight={code => highlight(code, languages.markdown)}\n        padding={10}\n        className=\"react-simple-code-editor\"\n      />\n    </Scrollbars>\n  );\n};\n\nexport default Editor;\n","import drafter from \"drafter.js\";\nimport minim from \"minim\";\nimport minimParseResult from \"minim-parse-result\";\nimport minimApiDescription from \"minim-api-description\";\n\nconst namespace = minim\n  .namespace()\n  .use(minimParseResult)\n  .use(minimApiDescription);\n\nasync function parse(source, options) {\n  return new Promise((resolve, reject) => {\n    drafter.parse(source, options, (err, result) => {\n      return err ? reject(err) : resolve(result);\n    });\n  });\n}\n\nconst whitespace = mson => {\n  return mson\n    .split(\"\\n\")\n    .map((val, index) => {\n      return index === 0 ? val : \" \".repeat(8) + val;\n    })\n    .join(\"\\n\");\n};\n\nconst toSource = ({ dataStructure, mson }) => {\n  return `\n# GET /\n\n+ Response 200 (application/json)\n    + Attributes (object)\n        ${whitespace(mson)}\n\n# Data Structures\n\n${dataStructure}\n  `;\n};\n\nconst bodySchema = async source => {\n  const refract = await parse(source);\n  const element = namespace.fromRefract(refract);\n\n  const annotations = element.annotations.toValue();\n\n  if (annotations.length !== 0) {\n    return {\n      annotations\n    };\n  }\n\n  const resource = element.api.resources.get(0);\n\n  if (!resource) return {};\n\n  const body = resource.transitions\n    .get(0)\n    .transactions.get(0)\n    .response.messageBody.toValue();\n\n  const schema = resource.transitions\n    .get(0)\n    .transactions.get(0)\n    .response.messageBodySchema.toValue();\n\n  return {\n    body: JSON.parse(body),\n    schema: JSON.parse(schema)\n  };\n};\n\nexport { toSource, bodySchema };\n","const seed01 = {\n  label: \"Example #1\",\n  dataStructure: `\n## Person A\n\n+ name: \\`Jack\\` (string, required)\n+ age: 54 (number)\n\n## Person B\n\n+ name: \\`Mark\\` (string, required)\n+ age: 34 (number)\n+ partners (array, fixed-type)\n  + (object)\n      + Include Person A\n  `,\n  mson: `\n+ people (array, fixed-type, required)\n  + (object)\n      + Include Person A\n  + (object)\n      + Include Person B\n  `\n};\n\nconst seed02 = {\n  label: \"Example #2\",\n  dataStructure: ``,\n  mson: `\n+ say (object, required)\n  + hello: \\`world!\\` (string, required)\n  `\n};\n\nconst seed03 = {\n  label: \"Example #3\",\n  dataStructure: `\n# Address (object)\n\nDescription is here! Properties to follow.\n\n## Properties\n\n- street\n- state\n- zip\n  `,\n  mson: `\n- address (Address)\n  `\n};\n\nconst seeds = [seed01, seed02, seed03];\n\nexport const seedLabels = seeds.map((seed, index) => ({\n  label: seed.label,\n  value: index\n}));\n\nexport default seeds;\n","import React, { useState, useEffect } from \"react\";\nimport ReactJson from \"react-json-view\";\nimport { Flex, Box, Heading, Link } from \"rebass\";\nimport useDebouncedCallback from \"use-debounce/lib/callback\";\nimport GithubCorner from \"react-github-corner\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport { Accordion, AccordionItem } from \"react-sanfona\";\nimport useWindowSize from \"@rehooks/window-size\";\nimport Dropdown from \"react-dropdown\";\nimport ReactGA from \"react-ga\";\n\nimport Editor from \"./Editor\";\nimport { toSource, bodySchema } from \"./parser\";\nimport seeds, { seedLabels } from \"./seed\";\nimport \"./App.css\";\n\nconst trackingID = \"UA-155250238-1\";\n\nReactGA.initialize(trackingID, { debug: true });\nReactGA.pageview(window.location.pathname + window.location.search);\n\nconst JSONTree = ({ source, displayDataTypes = false }) => (\n  <ReactJson\n    src={source}\n    enableClipboard={false}\n    name={false}\n    theme=\"monokai\"\n    displayDataTypes={displayDataTypes}\n    style={{\n      fontSize: 14,\n      fontFamily:\n        \"SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace\"\n    }}\n  />\n);\n\nconst Warnings = ({ annotations }) => {\n  if (!annotations) {\n    return null;\n  }\n\n  return (\n    <Box bg=\"red\" p={1} my={2}>\n      <ul>\n        {annotations.map(item => (\n          <li>{item}</li>\n        ))}\n      </ul>\n    </Box>\n  );\n};\n\nconst ResultRender = ({ data }) => {\n  if (data.annotations) {\n    return <Warnings annotations={data.annotations} />;\n  }\n\n  return (\n    <Tabs>\n      <TabList>\n        <Tab>JSON</Tab>\n        <Tab>Schema</Tab>\n      </TabList>\n\n      <TabPanel>\n        <JSONTree source={data.body} />\n      </TabPanel>\n      <TabPanel>\n        <JSONTree source={data.schema} displayDataTypes={false} />\n      </TabPanel>\n    </Tabs>\n  );\n};\n\nconst Result = ({ source }) => {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    bodySchema(source).then(data => {\n      setData(data);\n    });\n  }, [source]);\n\n  return (\n    <Box mr={[1, 4]}>\n      <ResultRender data={data} />\n    </Box>\n  );\n};\n\nconst tplSource = index =>\n  toSource({\n    dataStructure: seeds[index].dataStructure,\n    mson: seeds[index].mson\n  });\n\nconst toHeight = (height, count) => {\n  const divider = 120;\n\n  if (count <= 1) return height - divider;\n\n  return height / count - divider / count;\n};\n\nconst App = () => {\n  const { innerHeight } = useWindowSize();\n\n  const [index, setIndex] = useState(0);\n  const [dataStructure, setDataStructure] = useState(\n    seeds[index].dataStructure\n  );\n\n  const [mson, setMson] = useState(seeds[index].mson);\n  const [source, setSource] = useState(tplSource(index));\n  const [count, setCount] = useState(2);\n\n  const [sourceCallback] = useDebouncedCallback(\n    (dataStructure, mson) => {\n      const value = toSource({ dataStructure, mson });\n      setSource(value);\n\n      ReactGA.event({\n        category: \"Edit MSON\",\n        action: \"User edited MSON code in code editor\"\n      });\n    },\n    500,\n    [dataStructure, mson]\n  );\n\n  const onChange = index => {\n    setIndex(index);\n    setDataStructure(seeds[index].dataStructure);\n    setMson(seeds[index].mson);\n    setSource(tplSource(index));\n  };\n\n  useEffect(() => {\n    sourceCallback(dataStructure, mson);\n  });\n\n  const onExpand = () => setCount(count + 1);\n  const onClose = () => setCount(count - 1);\n\n  return (\n    <Flex flexWrap=\"wrap\" px={2} py={3}>\n      <Box width={[1, 1 / 2, 2 / 5]} px={3}>\n        <Dropdown\n          options={seedLabels}\n          value={seedLabels[index]}\n          onChange={({ value }) => onChange(value)}\n        />\n        <Accordion allowMultiple={true} duration={0}>\n          <AccordionItem\n            title=\"Data Structures\"\n            expanded={true}\n            onExpand={onExpand}\n            onClose={onClose}\n          >\n            <Editor\n              code={dataStructure}\n              onValueChange={code => setDataStructure(code)}\n              height={toHeight(innerHeight, count)}\n            />\n          </AccordionItem>\n          <AccordionItem\n            title=\"MSON\"\n            expanded={true}\n            onExpand={onExpand}\n            onClose={onClose}\n          >\n            <Editor\n              code={mson}\n              onValueChange={code => setMson(code)}\n              height={toHeight(innerHeight, count)}\n            />\n          </AccordionItem>\n        </Accordion>\n      </Box>\n      <Box width={[1, 1 / 2, 3 / 5]} px={2}>\n        <Heading textAlign=\"center\" m={[3, 1]}>\n          <Link href=\"https://github.com/apiaryio/mson\" color=\"white\">\n            MSON\n          </Link>{\" \"}\n          Playground\n        </Heading>\n        <Result source={source} />\n      </Box>\n      <GithubCorner\n        bannerColor=\"#D71149\"\n        href=\"https://github.com/bukalapak/mson-playground\"\n      />\n    </Flex>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./internal/serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}